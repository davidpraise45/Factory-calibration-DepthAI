#!/usr/bin/env python

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
from calibration.srv import Capture
## END_SUB_TUTORIAL
import time

def all_close(goal, actual, tolerance):
  """
  Convenience method for testing if a list of values are within a tolerance of their counterparts in another list
  @param: goal       A list of floats, a Pose or a PoseStamped
  @param: actual     A list of floats, a Pose or a PoseStamped
  @param: tolerance  A float
  @returns: bool
  """
  all_equal = True
  if type(goal) is list:
    for index in range(len(goal)):
      if abs(actual[index] - goal[index]) > tolerance:
        return False

  elif type(goal) is geometry_msgs.msg.PoseStamped:
    return all_close(goal.pose, actual.pose, tolerance)

  elif type(goal) is geometry_msgs.msg.Pose:
    return all_close(pose_to_list(goal), pose_to_list(actual), tolerance)

  return True

class MoveGroupPythonIntefaceTutorial(object):
  """MoveGroupPythonIntefaceTutorial"""
  def __init__(self):
    super(MoveGroupPythonIntefaceTutorial, self).__init__()
    ## BEGIN_SUB_TUTORIAL setup
    ##
    ## First initialize `moveit_commander`_ and a `rospy`_ node:
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('move_group_python_interface_tutorial',
                    anonymous=True)

    print("waiting for service--------------------------------->")
    rospy.wait_for_service('/capture_checkerboard')

    print("Found service----------------------------------->")
    try:
      self.capture_srv = rospy.ServiceProxy('/capture_checkerboard', Capture)  
    except rospy.ServiceException as e:
      print("Service call failed: %s"%e)

    print("ininitalized service---------------------------------------->")
    ## Get the name of the robot - this will be used to properly define the end-effector link when adding a box
    robot_name = rospy.get_param("~robot_name")
    self.robot_name = robot_name

    ## Get the dof of the robot - this will make sure that the right number of joints are controlled
    dof = rospy.get_param("~dof")
    self.dof = dof

    ## Instantiate a `RobotCommander`_ object. This object is the outer-level interface to
    ## the robot:
    robot = moveit_commander.RobotCommander()

    ## Instantiate a `PlanningSceneInterface`_ object.  This object is an interface
    ## to the world surrounding the robot:
    scene = moveit_commander.PlanningSceneInterface()

    ## Instantiate a `MoveGroupCommander`_ object.  This object is an interface
    ## to one group of joints.  In this case the group is the joints in the Interbotix
    ## arm so we set ``group_name = interbotix_arm``. If you are using a different robot,
    ## you should change this value to the name of your robot arm planning group.
    ## This interface can be used to plan and execute motions on the Interbotix Arm:
    group_name = "interbotix_arm"
    group = moveit_commander.MoveGroupCommander(group_name)
    group.set_planner_id("TRRT") # works better some times
    # group.set_planner_id("PRM") 
    
    ## We create a `DisplayTrajectory`_ publisher which is used later to publish
    ## trajectories for RViz to visualize:
    display_trajectory_publisher = rospy.Publisher("move_group/display_planned_path",
                                                   moveit_msgs.msg.DisplayTrajectory,
                                                   queue_size=20)

    ## END_SUB_TUTORIAL

    ## BEGIN_SUB_TUTORIAL basic_info
    ##
    ## Getting Basic Information
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^
    # We can get the name of the reference frame for this robot:
    planning_frame = group.get_planning_frame()
    print "============ Reference frame: %s" % planning_frame

    # We can also print the name of the end-effector link for this group:
    eef_link = group.get_end_effector_link()
    print "============ End effector: %s" % eef_link

    # We can get a list of all the groups in the robot:
    group_names = robot.get_group_names()
    print "============ Robot Groups:", robot.get_group_names()

    # Sometimes for debugging it is useful to print the entire state of the
    # robot:
    print "============ Printing robot state"
    print robot.get_current_state()

    print ""
    ## END_SUB_TUTORIAL

    # Misc variables
    self.box_name = ''
    self.robot = robot
    self.scene = scene
    self.group = group
    self.display_trajectory_publisher = display_trajectory_publisher
    self.planning_frame = planning_frame
    self.eef_link = eef_link
    self.group_names = group_names

  def go_to_next_joint_state(self, joints_state):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group
    dof = self.dof
    ## BEGIN_SUB_TUTORIAL plan_to_joint_state
    ##
    ## Planning to a Joint Goal
    ## ^^^^^^^^^^^^^^^^^^^^^^^^

    joint_goal = group.get_current_joint_values()
    joint_goal[0] =joints_state[0]
    joint_goal[1] =joints_state[1]

    joint_goal[2] =joints_state[2]
    joint_goal[3] =joints_state[3]

    if dof >= 5:
      joint_goal[4] =joints_state[4]
    if dof >= 6:
      joint_goal[5] = joints_state[5]
            # The go command can be called with joint values, poses, or without any
    # parameters if you have already set the pose or joint target for the group
    group.go(joint_goal, wait=True)

    # Calling ``stop()`` ensures that there is no residual movement
    group.stop()

    ## END_SUB_TUTORIAL

    # For testing:
    # Note that since this section of code will not be included in the tutorials
    # we use the class variable rather than the copied state variable
    current_joints = self.group.get_current_joint_values()
    # print(current_pose)

    return all_close(joint_goal, current_joints, 0.01)

  def capture_srv_client_handler(self, file_id):
    try:
      response = self.capture_srv(file_id)
      return response
    except rospy.ServiceException as e:
      print("Service call failed: %s"%e)


  def go_to_joint_state(self):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group
    dof = self.dof
    ## BEGIN_SUB_TUTORIAL plan_to_joint_state
    ##
    ## Planning to a Joint Goal
    ## ^^^^^^^^^^^^^^^^^^^^^^^^

    joint_goal = group.get_current_joint_values()
    joint_goal[0] = 0
    joint_goal[1] = -pi/4
    joint_goal[2] = 0
    joint_goal[3] = -pi/2
    if dof >= 5:
        joint_goal[4] = 0
    if dof >= 6:
        joint_goal[5] = pi/3

    # The go command can be called with joint values, poses, or without any
    # parameters if you have already set the pose or joint target for the group
    group.go(joint_goal, wait=True)

    # Calling ``stop()`` ensures that there is no residual movement
    group.stop()

    ## END_SUB_TUTORIAL

    # For testing:
    # Note that since this section of code will not be included in the tutorials
    # we use the class variable rather than the copied state variable
    current_joints = self.group.get_current_joint_values()
    # print(current_pose)
    current_pose = self.group.get_current_pose().pose
    print("currrent pose in go_to_joint_state------------------ ->")
    print(current_pose)
    return all_close(joint_goal, current_joints, 0.01)


  def go_to_pose_goal(self):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group
    robot_name = self.robot_name
    ## BEGIN_SUB_TUTORIAL plan_to_pose
    ##
    ## Planning to a Pose Goal
    ## ^^^^^^^^^^^^^^^^^^^^^^^
    ## We can plan a motion for this group to a desired pose for the
    ## end-effector:
    pose_goal = geometry_msgs.msg.Pose()
    pose_goal.orientation.w = 1.0
    if robot_name == "px100":
        pose_goal.position.x = 0.1
        pose_goal.position.z = 0.15
    else:
        pose_goal.position.x = 0
        pose_goal.position.z = 0.5
        pose_goal.position.y = 0.7
    group.set_pose_target(pose_goal)

    ## Now, we call the planner to compute the plan and execute it.
    plan = group.go(wait=True)
    # Calling `stop()` ensures that there is no residual movement
    group.stop()
    # It is always good to clear your targets after planning with poses.
    # Note: there is no equivalent function for clear_joint_value_targets()
    group.clear_pose_targets()

    ## END_SUB_TUTORIAL

    # For testing:
    # Note that since this section of code will not be included in the tutorials
    # we use the class variable rather than the copied state variable
    current_pose = self.group.get_current_pose().pose
    print("currrent pose------------------ ->")
    print(current_pose)
    # end_effector_ = robot.get_end_effector_link
    # self.group.get
    return all_close(pose_goal, current_pose, 0.01)

  def set_go_pose_goal(self, pose_goal):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group
    robot_name = self.robot_name
    ## BEGIN_SUB_TUTORIAL plan_to_pose
    ##
    ## Planning to a Pose Goal
    ## ^^^^^^^^^^^^^^^^^^^^^^^
    ## We can plan a motion for this group to a desired pose for the
    ## end-effector:

    group.set_pose_target(pose_goal)

    ## Now, we call the planner to compute the plan and execute it.
    plan = group.go(wait=True)
    # Calling `stop()` ensures that there is no residual movement
    group.stop()
    # It is always good to clear your targets after planning with poses.
    # Note: there is no equivalent function for clear_joint_value_targets()
    group.clear_pose_targets()

    ## END_SUB_TUTORIAL

    # For testing:
    # Note that since this section of code will not be included in the tutorials
    # we use the class variable rather than the copied state variable
    current_pose = self.group.get_current_pose().pose
    print("currrent pose------------------ ->")
    print(current_pose)
    current_joints = self.group.get_current_joint_values()
    print("currrent Joints------------------ ->")
    print(current_joints)

    # end_effector_ = robot.get_end_effector_link
    # self.group.get
    return all_close(pose_goal, current_pose, 0.01)


  def get_curr_pose(self):
    current_pose = self.group.get_current_pose().pose
    print("currrent pose------------------ ->")
    print(current_pose)

  def plan_cartesian_path(self, scale=1):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group

    ## BEGIN_SUB_TUTORIAL plan_cartesian_path
    ##
    ## Cartesian Paths
    ## ^^^^^^^^^^^^^^^
    ## You can plan a Cartesian path directly by specifying a list of waypoints
    ## for the end-effector to go through:
    ##
    waypoints = []

    wpose = group.get_current_pose().pose
    wpose.position.z += scale * 0.1  # First move up (z)
    waypoints.append(copy.deepcopy(wpose))

    wpose.position.x += scale * 0.1  # Second move forward in (x)
    waypoints.append(copy.deepcopy(wpose))

    wpose.position.z -= scale * 0.1  # Third move down (z)
    waypoints.append(copy.deepcopy(wpose))

    # We want the Cartesian path to be interpolated at a resolution of 1 cm
    # which is why we will specify 0.01 as the eef_step in Cartesian
    # translation.  We will disable the jump threshold by setting it to 0.0 disabling:
    (plan, fraction) = group.compute_cartesian_path(
                                       waypoints,   # waypoints to follow
                                       0.01,        # eef_step
                                       0.0)         # jump_threshold

    # Note: We are just planning, not asking move_group to actually move the robot yet:
    return plan, fraction

    ## END_SUB_TUTORIAL

  def display_trajectory(self, plan):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    robot = self.robot
    display_trajectory_publisher = self.display_trajectory_publisher

    ## BEGIN_SUB_TUTORIAL display_trajectory
    ##
    ## Displaying a Trajectory
    ## ^^^^^^^^^^^^^^^^^^^^^^^
    ## You can ask RViz to visualize a plan (aka trajectory) for you. But the
    ## group.plan() method does this automatically so this is not that useful
    ## here (it just displays the same trajectory again):
    ##
    ## A `DisplayTrajectory`_ msg has two primary fields, trajectory_start and trajectory.
    ## We populate the trajectory_start with our current robot state to copy over
    ## any AttachedCollisionObjects and add our plan to the trajectory.
    display_trajectory = moveit_msgs.msg.DisplayTrajectory()
    display_trajectory.trajectory_start = robot.get_current_state()
    display_trajectory.trajectory.append(plan)
    # Publish
    display_trajectory_publisher.publish(display_trajectory);

    ## END_SUB_TUTORIAL

  def execute_plan(self, plan):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group

    ## BEGIN_SUB_TUTORIAL execute_plan
    ##
    ## Executing a Plan
    ## ^^^^^^^^^^^^^^^^
    ## Use execute if you would like the robot to follow
    ## the plan that has already been computed:
    group.execute(plan, wait=True)

    ## **Note:** The robot's current joint state must be within some tolerance of the
    ## first waypoint in the `RobotTrajectory`_ or ``execute()`` will fail
    ## END_SUB_TUTORIAL

  def wait_for_state_update(self, box_is_known=False, box_is_attached=False, timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    box_name = self.box_name
    scene = self.scene

    ## BEGIN_SUB_TUTORIAL wait_for_scene_update
    ##
    ## Ensuring Collision Updates Are Receieved
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## If the Python node dies before publishing a collision object update message, the message
    ## could get lost and the box will not appear. To ensure that the updates are
    ## made, we wait until we see the changes reflected in the
    ## ``get_known_object_names()`` and ``get_known_object_names()`` lists.
    ## For the purpose of this tutorial, we call this function after adding,
    ## removing, attaching or detaching an object in the planning scene. We then wait
    ## until the updates have been made or ``timeout`` seconds have passed
    start = rospy.get_time()
    seconds = rospy.get_time()
    while (seconds - start < timeout) and not rospy.is_shutdown():
      # Test if the box is in attached objects
      attached_objects = scene.get_attached_objects([box_name])
      is_attached = len(attached_objects.keys()) > 0

      # Test if the box is in the scene.
      # Note that attaching the box will remove it from known_objects
      is_known = box_name in scene.get_known_object_names()
      # Test if we are in the expected state
      if (box_is_attached == is_attached) and (box_is_known == is_known):
        return True

      # Sleep so that we give other threads time on the processor
      rospy.sleep(0.1)
      seconds = rospy.get_time()

    # If we exited the while loop without returning then we timed out
    return False
    ## END_SUB_TUTORIAL

  def add_box(self, box_name, pose, dim,  timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    robot_name = self.robot_name
    # box_name = self.box_name
    scene = self.scene

    ## BEGIN_SUB_TUTORIAL add_box
    ##
    ## Adding Objects to the Planning Scene
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## First, we will create a box in the planning scene at the location of the left finger:
    box_pose = geometry_msgs.msg.PoseStamped()
    box_pose.header.frame_id = robot_name + "/base_link"
    box_pose.pose.orientation.w = 1.0
    box_pose.pose.position.z = pose[2] 
    box_pose.pose.position.x = pose[0]
    box_pose.pose.position.y = pose[1]

    ## END_SUB_TUTORIAL
    # Copy local variables back to class variables. In practice, you should use the class
    # variables directly unless you have a good reason not to.
    self.box_name=box_name
    self.scene.add_box(box_name, box_pose, size=dim)
    return self.wait_for_state_update(box_is_known=True, timeout=timeout)


  def attach_box(self, timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    box_name = self.box_name
    robot = self.robot
    scene = self.scene
    eef_link = self.eef_link
    group_names = self.group_names

    ## BEGIN_SUB_TUTORIAL attach_object
    ##
    ## Attaching Objects to the Robot
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## Next, we will attach the box to the Arm's wrist. Manipulating objects requires the
    ## robot be able to touch them without the planning scene reporting the contact as a
    ## collision. By adding link names to the ``touch_links`` array, we are telling the
    ## planning scene to ignore collisions between those links and the box. For the Interbotix
    ## robot, we set ``grasping_group = 'interbotix_gripper'``. If you are using a different robot,
    ## you should change this value to the name of your end effector group name.
    grasping_group = 'interbotix_gripper'
    touch_links = robot.get_link_names(group=grasping_group)
    scene.attach_box(eef_link, box_name, touch_links=touch_links)
    ## END_SUB_TUTORIAL

    # We wait for the planning scene to update.
    return self.wait_for_state_update(box_is_attached=True, box_is_known=False, timeout=timeout)

  def detach_box(self, timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    box_name = self.box_name
    scene = self.scene
    eef_link = self.eef_link

    ## BEGIN_SUB_TUTORIAL detach_object
    ##
    ## Detaching Objects from the Robot
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## We can also detach and remove the object from the planning scene:
    scene.remove_attached_object(eef_link, name=box_name)
    ## END_SUB_TUTORIAL

    # We wait for the planning scene to update.
    return self.wait_for_state_update(box_is_known=True, box_is_attached=False, timeout=timeout)

  def remove_box(self, timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    box_name = self.box_name
    scene = self.scene

    ## BEGIN_SUB_TUTORIAL remove_object
    ##
    ## Removing Objects from the Planning Scene
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## We can remove the box from the world.
    scene.remove_world_object(box_name)

    ## **Note:** The object must be detached before we can remove it from the world
    ## END_SUB_TUTORIAL

    # We wait for the planning scene to update.
    return self.wait_for_state_update(box_is_attached=False, box_is_known=False, timeout=timeout)


def main():
  try:
    print "============ Press `Enter` to begin the tutorial by setting up the moveit_commander (press ctrl-d to exit) ..."    
    # raw_input()

    tutorial = MoveGroupPythonIntefaceTutorial()

    # res = [1,2,3]
    # while(1):
    #   # raw_input()
    #   if input() == 'x':
    #     res[0]+= 0.2
    #   elif

    # box_name = "back_box"
    # res = tutorial.add_box(box_name, [-0.1, 0, 0.5], (0.1, 0.4, 0.6))
    
    raw_input()
    box_name = "base_box"

    res = tutorial.add_box(box_name, [0, 0, -0.01],(0.6, 0.6, 0.02))

    # while(True):
    #   raw_input()
    #   tutorial.get_curr_pose()

    # TODO: add home position
    pose_goal = geometry_msgs.msg.Pose()
    

# # start
#     pose_goal.position.x = 0.472119
#     pose_goal.position.y = 0.0
#     pose_goal.position.z = 0.42675
#     pose_goal.orientation.x = 0
#     pose_goal.orientation.y = 0
#     pose_goal.orientation.z = 0
#     pose_goal.orientation.w = 1.0
    
#     print("start-->")
#     tutorial.set_go_pose_goal(pose_goal)

#     time.sleep(1)

    print("start -->") 

    joint_goal = [0,0,0,0,0,0]

    tutorial.go_to_next_joint_state(joint_goal)

# left 1
    joints_goal = [0.5692879069377969, -0.061264558270077464, -0.07365505422455512, 1.771061925438095, 1.1748910437602111, -1.6845963642410158]

    print("left 1 -->")
    # pose_goal.position.x = 0.37845432843
    # pose_goal.position.y = 0.121279816271
    # pose_goal.position.z = 0.404892497354
    # pose_goal.orientation.x = 0.00516142500642
    # pose_goal.orientation.y = 0.097692649094
    # pose_goal.orientation.z = -0.292291875216
    # pose_goal.orientation.w = 0.951312233543
    
    
    tutorial.go_to_next_joint_state(joints_goal)

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.capture_srv_client_handler("P_1")
    time.sleep(1)

  # left 2 
    print("left 2 -->") 
    # joints_goal = [-2.368507326065181, -1.7590461392706553, 0.32442732089777315, 1.743870642826355, -1.6225235540387866, 0.408189253406223]
    joints_goal = [0.7730087577658563, 0.3276961983717477, 0.3242623826514706, 1.7006072182394685, 1.4454714320379867, -1.6844287949950618]

    # pose_goal.position.x = 0.411591647559
    # pose_goal.position.y = 0.246870561136
    # pose_goal.position.z = 0.376044478546
    # pose_goal.orientation.x = -0.0265851421897
    # pose_goal.orientation.y = 0.0778909430231
    # pose_goal.orientation.z = -0.325835364004
    # pose_goal.orientation.w = 0.941837325006
    
    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)

    tutorial.capture_srv_client_handler("P_2")
    time.sleep(1)

  # left 3 

    print("left 3 -->")

    # joints_goal = [-2.267086108376241, -1.5667150022362615, 1.0546774664328749, 1.6243658763470474, -1.5086104649102363, 1.1319672856246563]
 
    pose_goal.position.x = 0.45118331908
    pose_goal.position.y = 0.364659225187
    pose_goal.position.z = 0.334874213097
    pose_goal.orientation.x = 0.042598696368 
    pose_goal.orientation.y = -0.00558387827696 
    pose_goal.orientation.z = -0.303509292526 
    pose_goal.orientation.w = 0.95185938075 

    # raw_input()

    tutorial.set_go_pose_goal(pose_goal)
    # tutorial.go_to_next_joint_state(joints_goal)

    tutorial.capture_srv_client_handler("P_3")
    time.sleep(1)

# restart


    print("restart -->") 

    joint_goal = [0,0,0,0,0,0]

    tutorial.go_to_next_joint_state(joint_goal)


    # tutorial.set_go_pose_goal(pose_goal)
    time.sleep(1)

  # top 1

    print("top 1 -->")
    joints_goal = [0.06580003696516191, 0.6496641402933865, 1.682566763564324, -0.11621634143272604, -1.5237012151902027, -0.014641551594950784]

    # pose_goal.position.x = 0.480959380819
    # pose_goal.position.y = 0.0186728973959
    # pose_goal.position.z = 0.534579543982
    # pose_goal.orientation.x = -0.0320915721553 
    # pose_goal.orientation.y = 0.24172299209 
    # pose_goal.orientation.z = -0.0219507489553 
    # pose_goal.orientation.w = 0.969566032157 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)

    tutorial.capture_srv_client_handler("top_1")
    time.sleep(1)

  # top 2
    print("top 2 -->")
    joints_goal = [-0.004377206203473781, -0.017800570804476813, 0.5106211536628221, 0.030408722598111514, -1.0723827699844133, 0.02244848840376141]

    # pose_goal.position.x = 0.409571593372
    # pose_goal.position.y = 0.00114538603032
    # pose_goal.position.z = 0.52072899085
    # pose_goal.orientation.x = 0.0223940309388 
    # pose_goal.orientation.y = 0.268217254345 
    # pose_goal.orientation.z = 0.00569336422375 
    # pose_goal.orientation.w = 0.963081303657 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)

    tutorial.capture_srv_client_handler("top_2")
    time.sleep(1)


  # top 3

    print("top 3 -->")
    joints_goal = [0.05842017661375378, -0.01091474055365706, 0.508682744553706, -0.018383082431995736, -1.1322537449334422, 0.022251283194952686]

    # pose_goal.position.x = 0.408109447253
    # pose_goal.position.y = 0.0219358583358
    # pose_goal.position.z = 0.511638093983
    # pose_goal.orientation.x = -0.00479639502596 
    # pose_goal.orientation.y = 0.301891464666 
    # pose_goal.orientation.z = 0.0177699673067 
    # pose_goal.orientation.w = 0.953164606151 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)
    tutorial.capture_srv_client_handler("top_3")

    time.sleep(1)


  # bottom 1
    print("bottom 1 -->")
    joints_goal = [0.13606868986112158, 0.5215120491717602, -0.6259154415618842, 0.13400943020992345, 1.8297667107528208, 0.02169278611695778]

    # pose_goal.position.x = 0.408966634051
    # pose_goal.position.y = 0.0414024600974
    # pose_goal.position.z = 0.154287744791
    # pose_goal.orientation.x = 0.0384143717964 
    # pose_goal.orientation.y = -0.332817776185 
    # pose_goal.orientation.z = 0.000641605225098 
    # pose_goal.orientation.w = 0.942208178821 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)

    tutorial.capture_srv_client_handler("bottom_1")
    time.sleep(1)


  # bottom 2
    print("bottom 2 -->")
    joints_goal = [0.13788992401193792, 0.674550873909903, -0.551118472069638, 0.13742538797703818, 1.8170618246483157, 0.021266569887058374]

    # pose_goal.position.x = 0.425874986403
    # pose_goal.position.y = 0.044005983067
    # pose_goal.position.z = 0.103928387588
    # pose_goal.orientation.x = 0.0337231552409 
    # pose_goal.orientation.y = -0.290145360345 
    # pose_goal.orientation.z = 0.000204722357372 
    # pose_goal.orientation.w = 0.956388193549 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)

    tutorial.capture_srv_client_handler("bottom_2")
    time.sleep(1)


  # bottom 3
    print("bottom 3 -->")
    joints_goal = [0.14705021881303204, 0.8619704018470852, -0.41301399722681215, 0.1753433807927659, 1.830020125895237, 0.021073375261441003]

    # pose_goal.position.x = 0.446037733873
    # pose_goal.position.y = 0.0468594306518
    # pose_goal.position.z = 0.0486985411372
    # pose_goal.orientation.x = 0.032029215422 
    # pose_goal.orientation.y = -0.272343085517 
    # pose_goal.orientation.z = -0.0144403455887 
    # pose_goal.orientation.w = 0.961558552325 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)

    tutorial.capture_srv_client_handler("bottom_3")
    time.sleep(1)


  # Right 1
    print("Right 1 -->")
    joints_goal = [-0.6181781275060271, 0.24589725759526213, 0.3393180411553141, -1.619117307896248, 1.3303260219876556, 1.8034196787933272]
    
    # pose_goal.position.x = 0.435360807075
    # pose_goal.position.y = -0.175637005642
    # pose_goal.position.z = 0.428488881001
    # pose_goal.orientation.x = 0.0568298549743 
    # pose_goal.orientation.y = 0.0343912591401 
    # pose_goal.orientation.z = 0.345199645687 
    # pose_goal.orientation.w = 0.936175631757 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)
    tutorial.capture_srv_client_handler("right_1")
    time.sleep(1)

  # Right 2
    print("Right 2 -->")
    joints_goal = [-0.7056384060995823, 0.4408910221209656, 0.5904422957811959, -1.6162359831343154, 1.3963049887383314, 1.8038828895561951]

    # pose_goal.position.x = 0.45142560055
    # pose_goal.position.y = -0.239084042968
    # pose_goal.position.z = 0.415279546954
    # pose_goal.orientation.x = 0.0331148833631 
    # pose_goal.orientation.y = 0.021909663451 
    # pose_goal.orientation.z = 0.336116248248 
    # pose_goal.orientation.w = 0.940983123553 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)

    tutorial.capture_srv_client_handler("right_2")
    time.sleep(1)

  # Right 3
    print("Right 3 -->")
    # joints_goal = [2.22892811727817, -1.6106321493901121, 0.9403142566692279, 1.5903513439330847, 1.4640536886529003, 2.24347381844878]
    joints_goal = [-0.9127303995147863, 0.7875929049387073, 0.9387125797835927, -1.5077965957513577, 1.4824084209239934, 1.802813429049185]

    # pose_goal.position.x = 0.431014624729
    # pose_goal.position.y = -0.374573862973
    # pose_goal.position.z = 0.34983147361
    # pose_goal.orientation.x = 0.0523659844863 
    # pose_goal.orientation.y = -0.0235299874545 
    # pose_goal.orientation.z = 0.287492341758 
    # pose_goal.orientation.w = 0.956060822746 

    # raw_input()

    # tutorial.set_go_pose_goal(pose_goal)
    tutorial.go_to_next_joint_state(joints_goal)
    tutorial.capture_srv_client_handler("right_3")
    time.sleep(1)

# sleep pose
    print("sleep pose -->")
    

    pose_goal.position.x =  0.0811047406103
    pose_goal.position.y =  -1.34901728646e-05
    pose_goal.position.z =  0.128741153434
    pose_goal.orientation.x = -1.40023979928e-05
    pose_goal.orientation.y = 0.290732882379
    pose_goal.orientation.z = -6.39239167946e-05
    pose_goal.orientation.w = 0.956804257318
    

    tutorial.set_go_pose_goal(pose_goal)
    # tutorial.go_to_next_joint_state(joints_goal)
    # tutorial.capture_srv_client_handler("P_1")




    raw_input()

    print "============ Python tutorial demo complete!"
  except rospy.ROSInterruptException:
    print("EERRRRROOORRR_----------------------------------------------")
    return
  except KeyboardInterrupt:
    print("EERRRRROOORRR_----------------------------------------------")
    return

if __name__ == '__main__':
  main()


